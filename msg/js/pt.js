// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.pt');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Adicionar Comentário";
Blockly.Msg.AUTH = "Por favor autorize esta aplicação para permitir que o seu trabalho seja gravado e que o possa partilhar.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Alterar valor:";
Blockly.Msg.CHAT = "Converse com o seu colaborador, ao digitar nesta caixa!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Recolher Blocos";
Blockly.Msg.COLLAPSE_BLOCK = "Colapsar Bloco";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "cor 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "cor 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "proporção";
Blockly.Msg.COLOUR_BLEND_TITLE = "misturar";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mistura duas cores dada uma proporção (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "http://pt.wikipedia.org/wiki/Cor";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Escolhe uma cor da paleta de cores.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "cor aleatória";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Escolher cor de forma aleatória.";
Blockly.Msg.COLOUR_RGB_BLUE = "azul";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "vermelho";
Blockly.Msg.COLOUR_RGB_TITLE = "pinte com";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Cria uma cor de acordo com a quantidade especificada de vermelho, verde e azul. Todos os valores devem estar entre 0 e 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "sair do ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continuar com a próxima iteração do ciclo";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Sair do ciclo que está contido.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Ignora o resto deste ciclo e continua na próxima iteração.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Atenção: Este bloco só pode ser usado dentro de um ciclo.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "para cada item %1 na lista %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Para cada item numa lista, define a variável \"%1\" para o item e então faz algumas instruções.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "contar com %1 de %2 até %3 de %3 em %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Faz com que a variável \"%1\" assuma os valores desde o número inicial até ao número final, contando de acordo com o intervalo especificado e executa os blocos especificados.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Acrescente uma condição ao bloco se.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Acrescente uma condição de excepação final para o bloco se.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Acrescente, remova ou reordene secções para reconfigurar este bloco se.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "senão";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "senão se";
Blockly.Msg.CONTROLS_IF_MSG_IF = "se";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Se um valor é verdadeiro, então realize alguns passos.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Se um valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, realize o segundo bloco de instruções";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Se o primeiro valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, se o segundo valor é verdadeiro, realize o segundo bloco de instruções.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Se o primeiro valor é verdadeiro, então realize o primeiro bloco de instruções.  Senão, se o segundo valor é verdadeiro, realize o segundo bloco de instruções.  Se nenhum dos blocos for verdadeiro, realize o último bloco de instruções.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "http://pt.wikipedia.org/wiki/Estrutura_de_repeti%C3%A7%C3%A3o#Repeti.C3.A7.C3.A3o_com_vari.C3.A1vel_de_controle";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "faça";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repita %1 vez";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Faça algumas instruções várias vezes.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repita até";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repita enquanto";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Enquanto um valor for falso, então faça algumas instruções.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Enquanto um valor for verdadeiro, então faça algumas instruções.";
Blockly.Msg.DELETE_BLOCK = "Remover Bloco";
Blockly.Msg.DELETE_X_BLOCKS = "Remover %1 Blocos";
Blockly.Msg.DISABLE_BLOCK = "Desabilitar Bloco";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
Blockly.Msg.ENABLE_BLOCK = "Habilitar Bloco";
Blockly.Msg.EXPAND_ALL = "Expandir Blocos";
Blockly.Msg.EXPAND_BLOCK = "Expandir Bloco";
Blockly.Msg.EXTERNAL_INPUTS = "Entradas externas";
Blockly.Msg.HELP = "Ajuda";
Blockly.Msg.INLINE_INPUTS = "Entradas Internas";
Blockly.Msg.KF_ANIMATION_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_BOOLEAN_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_CURRENT_TOOLTIP = "Returns the current animation that is playing on this game object.";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_AFTER = "animation frame";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_BEFORE = "goto";  // untranslated
Blockly.Msg.KF_ANIMATION_FRAME_TOOLTIP = "Goes to the selected frame in the current animation. If at the end of an animation it will go to the first frame, or the start if at the end.";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_NUMBERS_TOOLTIP = "Returns a number related to the selected field..";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_MESSAGE = "play animation";  // untranslated
Blockly.Msg.KF_ANIMATION_PLAY_TOOLTIP = "Starts playing an animation on this gameobject.";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_MESSAGE = "current animation";  // untranslated
Blockly.Msg.KF_ANIMATION_STATE_TOOLTIP = " The state of the current animation.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_TOOLTIP = "Returns the state of a property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_AFTER = "side";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_BEFORE = "on";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_TOOLTIP = "Returns a Boolean indiciating the state of the selected statement for this gameobject.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_MESSAGE = "gravity";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_TOOLTIP = "Returns the selected gravity value.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_TOOLTIP = "Returns a value for the selected property.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_MESSAGE = "get physics enabled";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_TOOLTIP = "A boolean indicating if physics are enabled or not.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_MESSAGE = "get rotation based on";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_TOOLTIP = "Returns a rotation for the property based on a selected property.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_ONE = "collidable object of";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_THREE = "and is on the layer";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_TWO = "side exists at";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_TOOLTIP = "Returns a boolean indiciating if a colliable object (with the collision shape AND layer as passed) exists at the coordinates passed.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_MESSAGE = "collidable object exists at";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_TOOLTIP = "Returns a boolean indiciating if a colliable object exists at the cooridnates passed. ";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_MESSAGE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_TOOLTIP = "Sets a boolean property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_AFTER = "side collisions to";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_BEFORE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_TOOLTIP = "Sets the sides of this gameobject that can collide with other gameobjects.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_MESSAGE = "set gravity";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_TOOLTIP = "Sets the global gravity property to a value passed.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_MESSAGE = "set";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_TOOLTIP = "Sets a numeric property selected.";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_HELPURL = "";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_MESSAGE = "set physics enabled";  // untranslated
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_TOOLTIP = "Set the state of this objects arcadephysics component.";  // untranslated
Blockly.Msg.KF_BLOCK_DEPRECATED = "Warning: This block is being discontinued";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_MESSAGE = "center camera on";  // untranslated
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_TOOLTIP = "Centers the cameras to the instances current position.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_MESSAGE = "camera";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_MESSAGE = "camera";  // untranslated
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_TOOLTIP = "Returns a selected read only property on the camera.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_MESSAGE = "camera pan speed";  // untranslated
Blockly.Msg.KF_CAMERA_GET_SPEED_TOOLTIP = "Returns the cameras pan speed.";  // untranslated
Blockly.Msg.KF_CAMERA_GET_TOOLTIP = "Returns a selected property on the camera.";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_MESSAGE = "lock camera on";  // untranslated
Blockly.Msg.KF_CAMERA_LOCK_ON_TOOLTIP = "Locks the camera to an Instance passed.";  // untranslated
Blockly.Msg.KF_CAMERA_PAN_TO_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_PAN_TO_MESSAGE = "camera to";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_MESSAGE = "camera scale";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_GET_TOOLTIP = "Returns the values for the cameras scale on the selected axis.";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_MESSAGE = "camera scale";  // untranslated
Blockly.Msg.KF_CAMERA_SCALE_TOOLTIP = "Sets the camera scale on the selected axis to a value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SET_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_CAMERA_SET_MESSAGE_BEFORE = "set camera";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_MESSAGE = "set camera pan speed";  // untranslated
Blockly.Msg.KF_CAMERA_SET_SPEED_TOOLTIP = "Sets the cameras pan speed to a value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_SET_TOOLTIP = "Sets a selected property on the camera to the value passed.";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_MESSAGE = "is camera";  // untranslated
Blockly.Msg.KF_CAMERA_STATE_TOOLTIP = "Returns true if the statement is correct.";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_HELPURL = "";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_MESSAGE = "unlock camera";  // untranslated
Blockly.Msg.KF_CAMERA_UNLOCK_TOOLTIP = "Unlocks the camera.";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_AFTER = "at";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_BEFORE = "create new instance of";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_TOOLTIP = "Creates a new instance of a class type at the location specified.";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_AFTER = "of";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_TOOLTIP = "Creates a new instance of a class and assigns a variable to the instance.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_MESSAGE = "get all instances of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_TOOLTIP = "Returns a list of all the instances with that class.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_MESSAGE = "get class of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_TOOLTIP = "Returns a class of the text passed.";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_MESSAGE = "instance of";  // untranslated
Blockly.Msg.KF_CLASSES_GET_INSTANCE_TOOLTIP = "Selects the corresponding instance.";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_MESSAGE = "class of";  // untranslated
Blockly.Msg.KF_CLASSES_INSTANCE_TOOLTIP = "Returns the class of the selected instance.";  // untranslated
Blockly.Msg.KF_CLASSES_SELECTOR_HELPURL = "";  // untranslated
Blockly.Msg.KF_CLASSES_SELECTOR_TOOLTIP = "Returns the class selected.";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_MESSAGE = "create new coordinate at";  // untranslated
Blockly.Msg.KF_COORDINATE_CREATE_TOOLTIP = "Creates a new coordinate";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_ONE = "get";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_COORDINATE_GET_TOOLTIP = "Returns the numeric value for the passed coordinate";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_ONE = "set";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_THREE = "to";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_COORDINATE_SET_TOOLTIP = "Sets the selected axis to a defined value for the passed coordinate";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_AFTER = "has";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_BEFORE = "When the animation";  // untranslated
Blockly.Msg.KF_EVENT_ANIMATION_TOOLTIP = "Fires events when a selected event occurs on the animation passed.";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_MESSAGE = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_DROPDOWN_TOOLTIP = "Executes every frame. The order of execution depends on the choosen dropdown item.";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_MESSAGE = "Constantly";  // untranslated
Blockly.Msg.KF_EVENT_CONSTANTLY_TOOLTIP = "The event triggered every frame";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_MESSAGE = "When created";  // untranslated
Blockly.Msg.KF_EVENT_CREATE_TOOLTIP = "The event triggered when this game object is created";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "When key";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "updates";  // untranslated
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_MESSAGE = "When the player ";  // untranslated
Blockly.Msg.KF_EVENT_INST_INPUT_TOOLTIP = "The event is triggered when the player releases/presses (click/touch) a given instance";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_MESSAGE = "When the player presses on ";  // untranslated
Blockly.Msg.KF_EVENT_INST_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch on the given instance.";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_MESSAGE = "When the player releases over ";  // untranslated
Blockly.Msg.KF_EVENT_INST_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch on the given instance.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_MESSAGE = "When the player";  // untranslated
Blockly.Msg.KF_EVENT_KEY_INPUT_TOOLTIP = "The event is triggered when the player presses/releases the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_MESSAGE = "When the player presses";  // untranslated
Blockly.Msg.KF_EVENT_KEY_PRESS_TOOLTIP = "The event triggered when the player presses the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_MESSAGE = "When the player releases";  // untranslated
Blockly.Msg.KF_EVENT_KEY_RELEASE_TOOLTIP = "The event triggered when the player releases the given key on their keyboard.";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_MESSAGE = "When the level";  // untranslated
Blockly.Msg.KF_EVENT_LEVEL_START_TOOLTIP = "Executes when the current level starts. Only executes when a level starts up.";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_AFTER = "is retrieved";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_BEFORE = "When a message of";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_TOOLTIP = "Send events when the player";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_ONE = "When a message of";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_TWO = "is retrieved";  // untranslated
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_TOOLTIP = "Executed when a message is retrieved. You can use this block to get a value send from the message with value blocks.";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_MESSAGE = "Post Constantly";  // untranslated
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_TOOLTIP = "Triggered every frame AFTER the constantly event blocks.";  // untranslated
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_MESSAGE = "Pre Constantly";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_MESSAGE = "When removed";  // untranslated
Blockly.Msg.KF_EVENT_REMOVE_TOOLTIP = "The event is triggered when this gameobject is destroyed.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_MESSAGE = "When the stage is";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_INPUT_TOOLTIP = "The event is trggered when the player either pressed or releases anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_MESSAGE = "When stage is pressed";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch down anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_MESSAGE = "When stage is released";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch anywhere in the game scene.";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_MESSAGE = "When the stage is";  // untranslated
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_TOOLTIP = "Executes when the stage is touched.";  // untranslated
Blockly.Msg.KF_EVENT_TIME_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TIME_MESSAGE_AFTER = "milliseconds";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_MESSAGE_AFTER = "milliseconds have passed";  // untranslated
Blockly.Msg.KF_EVENT_TIME_SINGLE_TOOLTIP = "Triggers the inner blocks after the set period of time has occured. Warning: Does not check to see if the object was destroyed before the event fires.";  // untranslated
Blockly.Msg.KF_EVENT_TIME_TOOLTIP = "Triggers the event when the number of milliseconds set has passed. The number of milliseconds passed is not dynamic, meaning that it will not update once set.";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_MESSAGE = "When I am touched by";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_ON_TOOLTIP = "Triggers the inner blocks when this instance collides with the instance passed.";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_HELPURL = "";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_MESSAGE = "When I am touched get";  // untranslated
Blockly.Msg.KF_EVENT_TOUCH_RETURN_TOOLTIP = "Whenever this instance is touched by another instance (using arcadephysics) it will set a variable to that instance who touched it.";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_MESSAGE = "time";  // untranslated
Blockly.Msg.KF_GAME_GET_TIME_TOOLTIP = "Returns the associate time method associated.";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_MESSAGE = "go to";  // untranslated
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_TOOLTIP = "Changes the current level to the level specified.";  // untranslated
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_TOOLTIP = "A list of special levels, they include previous/current/next and the first/last levels.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_MESSAGE = "stage colour";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_TOOLTIP = "Gets the colour of the game background.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_TOOLTIP = "Gets the size of the games viewport on the screen.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_MESSAGE = "set stage colour to";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_TOOLTIP = "Sets the colour of the game background.";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_TOOLTIP = "Sets the size of the games viewport on the screen.";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_HELPURL = "";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_MESSAGE = "time";  // untranslated
Blockly.Msg.KF_GAME_TIME_METHOD_TOOLTIP = "Pauses or resumes the clock, thus pausing/resume gameplay.";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_MESSAGE = "get debug mode";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_TOOLTIP = "Returns the boolean indiciating if debug mode is currently on or off";  // untranslated
Blockly.Msg.KF_GET_DEBUG_MODE_URL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_MESSAGE = "all fingers";  // untranslated
Blockly.Msg.KF_INPUT_FINGERS_TOOLTIP = "Returns a list of all the finger objects.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_MESSAGE = "is";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_TOOLTIP = "Returns a boolean associated with the selected statement.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_MESSAGE = "of";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_MESSAGE = "of";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_TOOLTIP = "A number associated with the time selected.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_MESSAGE = "latest finger";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_LATEST_TOOLTIP = "The finger which was used in the last event.";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_MESSAGE = "finger";  // untranslated
Blockly.Msg.KF_INPUT_FINGER_SELECT_TOOLTIP = "Returns the finger associated with the number passed.";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_MESSAGE = "of mouse";  // untranslated
Blockly.Msg.KF_INPUT_MOUSE_TOOLTIP = "The position of the mouse in the current level";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_AFTER = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_BEFORE = "tag";  // untranslated
Blockly.Msg.KF_INSTANCE_ADD_TAG_TOOLTIP = "Adds a tag passed to the given gameobject.";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_MESSAGE = "destroy";  // untranslated
Blockly.Msg.KF_INSTANCE_DEATH_TOOLTIP = "Destroys the selected instance. Destruction cannot be reverted!";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_MESSAGE = "Execute";  // untranslated
Blockly.Msg.KF_INSTANCE_EXECUTE_TOOLTIP = "Executes the text directly pasted as code.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_MESSAGE = "get all children by tag";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_TOOLTIP = "Returns a list of all the instances that have the tag passed.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_MESSAGE = "instance by tag";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_TOOLTIP = "Returns a single instance by the tag passed.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_TOOLTIP = "Gets the value of a selected property of the given instance.";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_MESSAGE = "get visibility of";  // untranslated
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_TOOLTIP = "Returns visibility state of this gameobject. An alpha of zero is does not mean that the visiblity is false.";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_MESSAGE = "has tag";  // untranslated
Blockly.Msg.KF_INSTANCE_HAS_TAG_TOOLTIP = "Returns a boolean indicating if the gameobject has the tag or not.";  // untranslated
Blockly.Msg.KF_INSTANCE_MOVE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_MOVE_TOOLTIP = "Changes the depth (layer ordering) of an instance passed by the selected dropdown method.";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_ONE = "get key";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_TWO = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "set key";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_THREE = "on";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_MESSAGE = "instance ";  // untranslated
Blockly.Msg.KF_INSTANCE_SELECT_TOOLTIP = "Selects a game object with the corresponding id.";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_MESSAGE = "myself";  // untranslated
Blockly.Msg.KF_INSTANCE_SELF_TOOLTIP = "The game object that this script is attached to.";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_TOOLTIP = "Sets the selected property of a given instance to a new value.";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_BEFORE = "set visibility of";  // untranslated
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_TOOLTIP = "Sets whether the gameobject should be renderer or not. An alpha of zero is does not mean that the visiblity is false.";  // untranslated
Blockly.Msg.KF_INTERSECTS_CONTAINS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INTERSECTS_CONTAINS_MESSAGE = "contains";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_HELPURL = "";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_MESSAGE = "overlaps";  // untranslated
Blockly.Msg.KF_INTERSECTS_OVERLAPS_TOOLTIP = "Checks to see if the two passed instances overlap.";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_HELPURL = "";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_MESSAGE = "key:";  // untranslated
Blockly.Msg.KF_KEY_SPECIAL_TOOLTIP = "A special keyboard key";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE = "from";  // untranslated
Blockly.Msg.KF_MATH_INSTANCE_TOOLTIP = "Returns the selected value between two instances.";  // untranslated
Blockly.Msg.KF_MATH_LERP_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_ONE = "linear interpolation from";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_THREE = "by";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_MATH_LERP_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_MATH_UTILS_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_UTILS_TOOLTIP = "";  // untranslated
Blockly.Msg.KF_MATH_XY_TO_XY_HELPURL = "";  // untranslated
Blockly.Msg.KF_MATH_XY_TO_XY_TOOLTIP = "Returns the selected value between an instance and a set of coordinates passed.";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_MESSAGE_AFTER = "to all";  // untranslated
Blockly.Msg.KF_MESSAGING_CLASS_TOOLTIP = "Sends a message to all instances of a class you pass.";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_MESSAGE = "send every gameobject a message of";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_TOOLTIP = "Sends a message to every gameobject.";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_ONE = "send message to everyone";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_TWO = "with a value of";  // untranslated
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_TOOLTIP = "Sends a message and value defined to every gameobject.";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_AFTER = "to";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_BEFORE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_TOOLTIP = "Sends a message to a singular instance you passed.";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_ONE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_THREE = "with a value of";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_TOOLTIP = "Sends a message and value to an instance.";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_HELPURL = "";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_AFTER = "to each instance in";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_BEFORE = "send message";  // untranslated
Blockly.Msg.KF_MESSAGING_LIST_TOOLTIP = "Sends a message to every instance in a list.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_ONE = "set colour of shape";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_TOOLTIP = "Sets the colour a shape will render to a particular value.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_AFTER = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_TOOLTIP = "Creates a new circle with a radius that you set.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_THREE = "with a width of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_TWO = "from origin to";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_TOOLTIP = "Creates a new line from the transforms origin to a point in space.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_FOUR = " edges";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_THREE = " and ";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_TWO = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_TOOLTIP = "Creates a new polygon.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_AFTER = "with a width/height of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_BEFORE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_TOOLTIP = "Creates a new rectangle with a width and height that you set.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_FOUR = "points";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_THREE = "and";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_TWO = "with a radius of";  // untranslated
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_TOOLTIP = "Creates a new star with a specified number of points.";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_HELPURL = "";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_MESSAGE = "get colour of shape";  // untranslated
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_TOOLTIP = "Returns the colour of a shape passed.";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_MESSAGE = "set debug mode";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_TOOLTIP = "Sets the debug mode of the game";  // untranslated
Blockly.Msg.KF_SET_DEBUG_MODE_URL = "";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_MESSAGE = "music";  // untranslated
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_TOOLTIP = "Pauses or resumes the current background track.";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_MESSAGE = "mute";  // untranslated
Blockly.Msg.KF_SOUND_GET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_MESSAGE = "get volume";  // untranslated
Blockly.Msg.KF_SOUND_GET_VOLUME_TOOLTIP = "Gets the volume of all sounds played. A number from 0 - 100.";  // untranslated
Blockly.Msg.KF_SOUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_MESSAGE = "play music";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_TOOLTIP = "Starts playing the specified music from the beginning.";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_MESSAGE = "play sound effect";  // untranslated
Blockly.Msg.KF_SOUND_PLAY_EFFECT_TOOLTIP = "Plays the given sound effect once.";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_MESSAGE = "mute";  // untranslated
Blockly.Msg.KF_SOUND_SET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_MESSAGE = "set volume";  // untranslated
Blockly.Msg.KF_SOUND_SET_VOLUME_TOOLTIP = "Sets the volume of all sounds played. A number from 0 - 100.";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_HELPURL = "";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_MESSAGE = "stop the current music";  // untranslated
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_TOOLTIP = "Stops playing the current music and clears the playhead. If resumed it will start from the beginning.";  // untranslated
Blockly.Msg.KF_SOUND_TOOLTIP = "A list of all the sounds included in the game.";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_ONE = "set text alignment of";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_TOOLTIP = "Sets the alignment of a textfield to a selected value in the dropdown";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_MESSAGE = "get font colour of";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_GET_TOOLTIP = "Returns the font colour of a textfield";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_ONE = "set font colour of";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_COLOUR_SET_TOOLTIP = "Sets the font colour of a passed textfield to a colour passed";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_ONE = "create new";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_TWO = "with text";  // untranslated
Blockly.Msg.KF_TEXT_CREATE_TOOLTIP = "Creates a new textfield.";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_ONE = "set font family of";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_FAMILY_SET_TOOLTIP = "Sets the font family that a textfield should use.";  // untranslated
Blockly.Msg.KF_TEXT_FONT_PRESETS_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_FONT_PRESETS_TOOLTIP = "Returns the string which identifies the font family selected";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_ONE = "get";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_GET_TOOLTIP = "Returns the current value of the selected property from a textfield";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_ONE = "set";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_THREE = "to";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_TWO = "of";  // untranslated
Blockly.Msg.KF_TEXT_NUMERIC_SET_TOOLTIP = "Sets the numeric value of a textfield to the value passed";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_MESSAGE = "get text of";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_GET_TOOLTIP = "Returns the text of a textfield";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_ONE = "set text of";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_TEXT_SET_TOOLTIP = "Sets the text which a textfield should display textfield to a string passed";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_HELPURL = "";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_ONE = "set text weight of";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.KF_TEXT_WEIGHT_SET_TOOLTIP = "Sets the font weight of a textfield to a selected value in the dropdown";  // untranslated
Blockly.Msg.KF_TYPE_BOOLEAN = "True/False";  // untranslated
Blockly.Msg.KF_TYPE_INSTANCE = "Instance";  // untranslated
Blockly.Msg.KF_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.KF_TYPE_STRING = "Text";  // untranslated
Blockly.Msg.LISTS_ADD_HELPURL = "";  // untranslated
Blockly.Msg.LISTS_ADD_MESSAGE_ONE = "in list";  // untranslated
Blockly.Msg.LISTS_ADD_MESSAGE_THREE = "to the";  // untranslated
Blockly.Msg.LISTS_ADD_MESSAGE_TWO = "add";  // untranslated
Blockly.Msg.LISTS_ADD_TOOLTIP = "Adds a value to either the front or to the end of a list provided.";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "criar lista vazia";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Retorna uma lista, de tamanho 0, contendo nenhum registo";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Acrescente, remova ou reordene as seções para reconfigurar este bloco lista.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "criar lista com";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Acrescenta um item à lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Cria uma lista com qualquer número de itens.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primeiro";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# a partir do final";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "obter";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obter e remover";
Blockly.Msg.LISTS_GET_INDEX_LAST = "último";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatório";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remover";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Retorna o primeiro item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Retorna o item da lista na posição especificada.  #1 é o último item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Retorna o item na posição especificada da lista .  #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Retorna o último item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Retorna um item aleatório de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Remove e retorna o primeiro item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Remove e retorna o item na posição especificada de uma lista.  #1 é o último item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Remove e retorna o item na posição especificada de uma lista.  #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Remove e retorna o último item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Remove e retorna um item aleatório de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Remove o primeiro item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Remove o item na posição especificada de uma lista.  #1 é o ultimo item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Remove o item de uma posição especifica da lista.  #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Remove o último item de uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Remove um item aleatório de uma lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "até #, a partir do final";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "até #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "para o último";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obtem sublista da primeira lista";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obtem sublista de # a partir do final";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obtem sublista de #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Cria uma cópia da porção especificada de uma lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "encontre a primeira ocorrência do item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "encontre a última ocorrência do item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Retorna a posição da primeira/última ocorrência do item na lista.  Retorna 0 se o texto não for encontrado.";
Blockly.Msg.LISTS_INLIST = "na lista";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 está vazia";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Retona verdadeiro se a lista estiver vazia.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "tamanho de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Retorna o tamanho de uma lista.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "criar lista com o item %1 repetido %2 vezes";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Cria uma lista constituída por um dado valor repetido o número de vezes especificado.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "como";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserir em";
Blockly.Msg.LISTS_SET_INDEX_SET = "definir";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Insere o item no início da lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Insere o item numa posição especificada de uma lista.  #1 é o último item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Insere o item numa posição especificada numa lista.  #1 é o primeiro item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Insere o item no final da lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Insere o item numa posição aleatória de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Define o primeiro item de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Define o item na posição especificada de uma lista.  #1 é o último item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Define o item na posição especificada de uma lista.  #1 é o primeiro item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Define o último item de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Define um item aleatório de uma lista.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "fazer lista a partir de texto";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "fazer texto a partir da lista";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Juntar uma lista de textos num único texto, separado por um delimitador.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Dividir o texto numa lista de textos, separando-o em cada delimitador.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "com delimitador";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falso";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Retorna verdadeiro ou falso.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "verdadeiro";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "http://pt.wikipedia.org/wiki/Inequa%C3%A7%C3%A3o";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Retorna verdadeiro se ambas as entradas forem iguais entre si.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Retorna verdadeiro se a primeira entrada for maior que a segunda entrada.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Retorna verdadeiro se a primeira entrada for maior ou igual à segunda entrada.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Retorna verdadeiro se a primeira entrada for menor que a segunda entrada.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Retorna verdadeiro se a primeira entrada for menor ou igual à segunda entrada.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Retorna verdadeiro se ambas as entradas forem diferentes entre si.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "não %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Retorna verdadeiro se a entrada for falsa.  Retorna falso se a entrada for verdadeira.";
Blockly.Msg.LOGIC_NULL = "nulo";
Blockly.Msg.LOGIC_NULL_HELPURL = "http://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Retorna nulo.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "ou";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Retorna verdadeiro se ambas as entradas forem verdadeiras.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Retorna verdadeiro se pelo menos uma das estradas for verdadeira.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "teste";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "http://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "se falso";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "se verdadeiro";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Avalia a condição em \"teste\". Se a condição for verdadeira retorna o valor \"se verdadeiro\", senão retorna o valor \"se falso\".";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "http://pt.wikipedia.org/wiki/Aritm%C3%A9tica";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Retorna a soma de dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Retorna o quociente da divisão de dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Retorna a diferença de dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Retorna o produto de dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Retorna o primeiro número elevado à potência do segundo número.";
Blockly.Msg.MATH_CHANGE_HELPURL = "http://pt.wikipedia.org/wiki/Adi%C3%A7%C3%A3o";
Blockly.Msg.MATH_CHANGE_TITLE = "alterar %1 por %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Soma um número à variável \"%1\".";
Blockly.Msg.MATH_CONSTANT_HELPURL = "http://pt.wikipedia.org/wiki/Anexo:Lista_de_constantes_matem%C3%A1ticas";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Retorna uma das constantes comuns: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infinito).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "restringe %1 inferior %2 superior %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Restringe um número entre os limites especificados (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "é divisível por";
Blockly.Msg.MATH_IS_EVEN = "é par";
Blockly.Msg.MATH_IS_NEGATIVE = "é negativo";
Blockly.Msg.MATH_IS_ODD = "é impar";
Blockly.Msg.MATH_IS_POSITIVE = "é positivo";
Blockly.Msg.MATH_IS_PRIME = "é primo";
Blockly.Msg.MATH_IS_TOOLTIP = "Verifica se um número é par, impar, primo, inteiro, positivo, negativo, ou se é divisível por outro número.  Retorna verdadeiro ou falso.";
Blockly.Msg.MATH_IS_WHOLE = "é inteiro";
Blockly.Msg.MATH_MODULO_HELPURL = "http://pt.wikipedia.org/wiki/Opera%C3%A7%C3%A3o_m%C3%B3dulo";
Blockly.Msg.MATH_MODULO_TITLE = "resto da divisão de %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Retorna o resto da divisão de dois números.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "http://pt.wikipedia.org/wiki/N%C3%BAmero";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Um número.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "média de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maior de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "menor de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "moda de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "item aleatório de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "desvio padrão de uma lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "soma da lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Retorna a média aritmética dos valores números da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Retorna o maior número da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Retorna a mediana da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Retorna o menor número da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Retorna a lista de item(ns) mais comum(ns) da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Retorna um elemento aleatório da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Retorna o desvio padrão dos números da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Retorna a soma de todos os números da lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "http://pt.wikipedia.org/wiki/N%C3%BAmero_aleat%C3%B3rio";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fração aleatória";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Insere uma fração aleatória entre 0.0 (inclusive) e 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "http://pt.wikipedia.org/wiki/N%C3%BAmero_aleat%C3%B3rio";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "inteiro aleatório entre %1 e %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Retorna um número inteiro entre os dois limites especificados, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "http://pt.wikipedia.org/wiki/Arredondamento";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arredonda";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arredonda para baixo";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arredonda para cima";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arredonda um número para cima ou para baixo.";
Blockly.Msg.MATH_SINGLE_HELPURL = "http://pt.wikipedia.org/wiki/Raiz_quadrada";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluto";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "raíz quadrada";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Retorna o valor absoluto de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Retorna o número e elevado à potência de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Retorna o logarítmo natural de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Retorna o logarítmo em base 10 de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Retorna o oposto de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Retorna 10 elevado à potência de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Retorna a raiz quadrada de um número.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "http://pt.wikipedia.org/wiki/Fun%C3%A7%C3%A3o_trigonom%C3%A9trica";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Retorna o arco cosseno de um número.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Retorna o arco seno de um número.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Retorna o arco tangente de um número.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Retorna o cosseno de um grau (não radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Retorna o seno de um grau (não radiano).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Retorna a tangente de um grau (não radiano).";
Blockly.Msg.ME = "Eu";
Blockly.Msg.NEW_VARIABLE = "Nova variável...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nome da nova variável:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitir declarações";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "com:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "http://pt.wikipedia.org/wiki/Sub-rotina";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Executa a função \"%1\".";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "http://pt.wikipedia.org/wiki/Sub-rotina";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Executa a função \"%1\" e usa o seu retorno.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "com:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Criar \"%1\"";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "faz algo";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "para";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Cria uma função que não tem retorno.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "http://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retorna";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Cria uma função que possui um valor de retorno.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Atenção: Esta função tem parâmetros duplicados.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Destacar definição da função";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "se o valor é verdadeiro, então retorna um segundo valor.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Atenção: Este bloco só pode ser utilizado dentro da definição de uma função.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nome da entrada:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Adicionar uma entrada para a função.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entradas";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Adicionar, remover ou reordenar as entradas para esta função.";
Blockly.Msg.REMOVE_COMMENT = "Remover Comentário";
Blockly.Msg.RENAME_VARIABLE = "Renomear variável...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renomear todas as variáveis '%1' para:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "acrescentar texto";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "para";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Acrescentar um pedaço de texto à variável \"%1\".";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "para minúsculas";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "para Iniciais Maiúsculas";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "para MAIÚSCULAS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Retorna uma cópia do texto em formato diferente.";
Blockly.Msg.TEXT_CHARAT_FIRST = "obter primeira letra";
Blockly.Msg.TEXT_CHARAT_FROM_END = "obter letra nº a partir do final";
Blockly.Msg.TEXT_CHARAT_FROM_START = "obter letra nº";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "no texto";
Blockly.Msg.TEXT_CHARAT_LAST = "obter última letra";
Blockly.Msg.TEXT_CHARAT_RANDOM = "obter letra aleatória";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Retorna a letra na posição especificada.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Acrescentar um item ao texto.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unir";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Acrescenta, remove ou reordena seções para reconfigurar este bloco de texto.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "até letra nº a partir do final";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "até letra nº";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "até última letra";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "no texto";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obter subsequência a partir da primeira letra";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obter subsequência de tamanho # a partir do final";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obter subsequência de tamanho #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Retorna a parte especificada do texto.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "no texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "primeira ocorrência do texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "última ocorrência do texto";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Retorna a posição da primeira/última ocorrência do primeiro texto no segundo texto.  Retorna 0 se o texto não for encontrado.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 está vazio";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Retorna verdadeiro se o texto fornecido estiver vazio.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "criar texto com";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Criar um pedaço de texto juntando qualquer número de itens.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "tamanho de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Devolve o número de letras (incluindo espaços) do texto fornecido.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "imprime %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Imprime o texto, número ou outro valor especificado.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Pede ao utilizador um número.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Pede ao utilizador um texto.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "pede um número com a mensagem";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "Pede um texto com a mensagem";
Blockly.Msg.TEXT_TEXT_HELPURL = "http://pt.wikipedia.org/wiki/Cadeia_de_caracteres";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Uma letra, palavra ou linha de texto.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "remover espaços de ambos os lados";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "remover espaços à esquerda de";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "remover espaços à direita";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Retorna uma cópia do texto com os espaços removidos de uma ou ambas as extremidades.";
Blockly.Msg.TODAY = "Hoje";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Criar \"definir %1\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Retorna o valor desta variável.";
Blockly.Msg.VARIABLES_GET_TOOLTIP_GLOBAL = "Returns the value of this global variable. Global variables persist for the duration of the game.";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP_LOCAL = "Returns the value of this local variable. Local variables persist for the duration of a function or event.";  // untranslated
Blockly.Msg.VARIABLES_SET = "definir %1 para %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Criar \"obter %1\"";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_MESSAGE_ONE = "set";  // untranslated
Blockly.Msg.VARIABLES_SET_MESSAGE_TWO = "to";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Define esta variável para o valor inserido.";
Blockly.Msg.VARIABLES_SET_TOOLTIP_GLOBAL = "Sets this variable to be equal to the input which will persist for the duration of the game.";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP_LOCAL = "Sets this variable to be equal to the input which will persist for the duration of the function or event.";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ANY = "any";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY = "list";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "true/false";  // untranslated
Blockly.Msg.VARIABLES_TYPE_CLASS = "class";  // untranslated
Blockly.Msg.VARIABLES_TYPE_COLOUR = "colour";  // untranslated
Blockly.Msg.VARIABLES_TYPE_COORDINATE = "coordinate";  // untranslated
Blockly.Msg.VARIABLES_TYPE_INSTANCE = "instance";  // untranslated
Blockly.Msg.VARIABLES_TYPE_NUMBER = "number";  // untranslated
Blockly.Msg.VARIABLES_TYPE_POINTER = "finger/pointer";  // untranslated
Blockly.Msg.VARIABLES_TYPE_SOUND = "sound";  // untranslated
Blockly.Msg.VARIABLES_TYPE_STRING = "text";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_AFTER = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_BEFORE = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;