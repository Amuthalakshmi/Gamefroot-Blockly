// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.HELP = "Help";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.KF_ANIMATION_BOOLEAN_HELPURL = "";
Blockly.Msg.KF_ANIMATION_BOOLEAN_MESSAGE = "current animation";
Blockly.Msg.KF_ANIMATION_CURRENT_HELPURL = "";
Blockly.Msg.KF_ANIMATION_CURRENT_MESSAGE = "current animation";
Blockly.Msg.KF_ANIMATION_CURRENT_TOOLTIP = "Returns the current animation that is playing on this game object.";
Blockly.Msg.KF_ANIMATION_FRAME_HELPURL = "";
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_AFTER = "animation frame";
Blockly.Msg.KF_ANIMATION_FRAME_MESSAGE_BEFORE = "goto";
Blockly.Msg.KF_ANIMATION_FRAME_TOOLTIP = "Goes to the selected frame in the current animation. If at the end of an animation it will go to the first frame, or the start if at the end.";
Blockly.Msg.KF_ANIMATION_NUMBERS_HELPURL = "";
Blockly.Msg.KF_ANIMATION_NUMBERS_MESSAGE = "current animation";
Blockly.Msg.KF_ANIMATION_NUMBERS_TOOLTIP = "Returns a number related to the selected field..";
Blockly.Msg.KF_ANIMATION_PLAY_HELPURL = "";
Blockly.Msg.KF_ANIMATION_PLAY_MESSAGE = "play animation";
Blockly.Msg.KF_ANIMATION_PLAY_TOOLTIP = "Starts playing an animation on this gameobject.";
Blockly.Msg.KF_ANIMATION_STATE_HELPURL = "";
Blockly.Msg.KF_ANIMATION_STATE_MESSAGE = "current animation";
Blockly.Msg.KF_ANIMATION_STATE_TOOLTIP = " The state of the current animation.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_BOOLEAN_TOOLTIP = "Returns the state of a property selected.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_AFTER = "side";
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_MESSAGE_BEFORE = "on";
Blockly.Msg.KF_ARCADEPHYSICS_GET_COLLISIONS_TOOLTIP = "Returns a Boolean indiciating the state of the selected statement for this gameobject.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_MESSAGE = "gravity";
Blockly.Msg.KF_ARCADEPHYSICS_GET_GRAVITY_TOOLTIP = "Returns the selected gravity value.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_NUMERIC_TOOLTIP = "Returns a value for the selected property.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_MESSAGE = "get physics enabled";
Blockly.Msg.KF_ARCADEPHYSICS_GET_PHYSICS_ENABLED_TOOLTIP = "A boolean indicating if physics are enabled or not.";
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_MESSAGE = "get rotation based on";
Blockly.Msg.KF_ARCADEPHYSICS_GET_ROTATION_FROM_TOOLTIP = "Returns a rotation for the property based on a selected property.";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_ONE = "collidable object of";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_THREE = "and is on the layer";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_MESSAGE_TWO = "side exists at";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_LAYER_TOOLTIP = "Returns a boolean indiciating if a colliable object (with the collision shape AND layer as passed) exists at the coordinates passed.";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_MESSAGE = "collidable object exists at";
Blockly.Msg.KF_ARCADEPHYSICS_PROBE_TOOLTIP = "Returns a boolean indiciating if a colliable object exists at the cooridnates passed. ";
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_MESSAGE = "set";
Blockly.Msg.KF_ARCADEPHYSICS_SET_BOOLEAN_TOOLTIP = "Sets a boolean property selected.";
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_AFTER = "side collisions to";
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_MESSAGE_BEFORE = "set";
Blockly.Msg.KF_ARCADEPHYSICS_SET_COLLISIONS_TOOLTIP = "Sets the sides of this gameobject that can collide with other gameobjects.";
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_MESSAGE = "set gravity";
Blockly.Msg.KF_ARCADEPHYSICS_SET_GRAVITY_TOOLTIP = "Sets the global gravity property to a value passed.";
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_MESSAGE = "set";
Blockly.Msg.KF_ARCADEPHYSICS_SET_NUMERIC_TOOLTIP = "Sets a numeric property selected.";
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_HELPURL = "";
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_MESSAGE = "set physics enabled";
Blockly.Msg.KF_ARCADEPHYSICS_SET_PHYSICS_ENABLED_TOOLTIP = "Set the state of this objects arcadephysics component.";
Blockly.Msg.KF_BLOCK_DEPRECATED = "Warning: This block is being discontinued";
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_HELPURL = "";
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_MESSAGE = "center camera on";
Blockly.Msg.KF_CAMERA_CENTER_ON_INSTANCE_TOOLTIP = "Centers the cameras to the instances current position.";
Blockly.Msg.KF_CAMERA_GET_HELPURL = "";
Blockly.Msg.KF_CAMERA_GET_MESSAGE = "camera";
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_HELPURL = "";
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_MESSAGE = "camera";
Blockly.Msg.KF_CAMERA_GET_READ_ONLY_TOOLTIP = "Returns a selected read only property on the camera.";
Blockly.Msg.KF_CAMERA_GET_SPEED_HELPURL = "";
Blockly.Msg.KF_CAMERA_GET_SPEED_MESSAGE = "camera pan speed";
Blockly.Msg.KF_CAMERA_GET_SPEED_TOOLTIP = "Returns the cameras pan speed.";
Blockly.Msg.KF_CAMERA_GET_TOOLTIP = "Returns a selected property on the camera.";
Blockly.Msg.KF_CAMERA_LOCK_ON_HELPURL = "";
Blockly.Msg.KF_CAMERA_LOCK_ON_MESSAGE = "lock camera on";
Blockly.Msg.KF_CAMERA_LOCK_ON_TOOLTIP = "Locks the camera to an Instance passed.";
Blockly.Msg.KF_CAMERA_PAN_TO_HELPURL = "";
Blockly.Msg.KF_CAMERA_PAN_TO_MESSAGE = "camera to";
Blockly.Msg.KF_CAMERA_SCALE_GET_HELPURL = "";
Blockly.Msg.KF_CAMERA_SCALE_GET_MESSAGE = "camera scale";
Blockly.Msg.KF_CAMERA_SCALE_GET_TOOLTIP = "Returns the values for the cameras scale on the selected axis.";
Blockly.Msg.KF_CAMERA_SCALE_HELPURL = "";
Blockly.Msg.KF_CAMERA_SCALE_MESSAGE = "camera scale";
Blockly.Msg.KF_CAMERA_SCALE_TOOLTIP = "Sets the camera scale on the selected axis to a value passed.";
Blockly.Msg.KF_CAMERA_SET_HELPURL = "";
Blockly.Msg.KF_CAMERA_SET_MESSAGE_AFTER = "to";
Blockly.Msg.KF_CAMERA_SET_MESSAGE_BEFORE = "set camera";
Blockly.Msg.KF_CAMERA_SET_SPEED_HELPURL = "";
Blockly.Msg.KF_CAMERA_SET_SPEED_MESSAGE = "set camera pan speed";
Blockly.Msg.KF_CAMERA_SET_SPEED_TOOLTIP = "Sets the cameras pan speed to a value passed.";
Blockly.Msg.KF_CAMERA_SET_TOOLTIP = "Sets a selected property on the camera to the value passed.";
Blockly.Msg.KF_CAMERA_STATE_HELPURL = "";
Blockly.Msg.KF_CAMERA_STATE_MESSAGE = "is camera";
Blockly.Msg.KF_CAMERA_STATE_TOOLTIP = "Returns true if the statement is correct.";
Blockly.Msg.KF_CAMERA_UNLOCK_HELPURL = "";
Blockly.Msg.KF_CAMERA_UNLOCK_MESSAGE = "unlock camera";
Blockly.Msg.KF_CAMERA_UNLOCK_TOOLTIP = "Unlocks the camera.";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_HELPURL = "";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_AFTER = "at";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_MESSAGE_BEFORE = "create new instance of";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_TOOLTIP = "Creates a new instance of a class type at the location specified.";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_HELPURL = "";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_AFTER = "of";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_MESSAGE_BEFORE = "create new";
Blockly.Msg.KF_CLASSES_CREATE_INSTANCE_WITH_VAR_TOOLTIP = "Creates a new instance of a class and assigns a variable to the instance.";
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_HELPURL = "";
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_MESSAGE = "get all instances of";
Blockly.Msg.KF_CLASSES_GET_ALL_INSTANCES_TOOLTIP = "Returns a list of all the instances with that class.";
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_HELPURL = "";
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_MESSAGE = "get class of";
Blockly.Msg.KF_CLASSES_GET_BY_TEXT_TOOLTIP = "Returns a class of the text passed.";
Blockly.Msg.KF_CLASSES_GET_INSTANCE_HELPURL = "";
Blockly.Msg.KF_CLASSES_GET_INSTANCE_MESSAGE = "instance of";
Blockly.Msg.KF_CLASSES_GET_INSTANCE_TOOLTIP = "Selects the corresponding instance.";
Blockly.Msg.KF_CLASSES_INSTANCE_HELPURL = "";
Blockly.Msg.KF_CLASSES_INSTANCE_MESSAGE = "class of";
Blockly.Msg.KF_CLASSES_INSTANCE_TOOLTIP = "Returns the class of the selected instance.";
Blockly.Msg.KF_CLASSES_SELECTOR_HELPURL = "";
Blockly.Msg.KF_CLASSES_SELECTOR_TOOLTIP = "Returns the class selected.";
Blockly.Msg.KF_COORDINATE_CREATE_HELPURL = "";
Blockly.Msg.KF_COORDINATE_CREATE_MESSAGE = "create new coordinate at";
Blockly.Msg.KF_COORDINATE_CREATE_TOOLTIP = "Creates a new coordinate";
Blockly.Msg.KF_COORDINATE_GET_HELPURL = "";
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_ONE = "get";
Blockly.Msg.KF_COORDINATE_GET_MESSAGE_TWO = "of";
Blockly.Msg.KF_COORDINATE_GET_TOOLTIP = "Returns the numeric value for the passed coordinate";
Blockly.Msg.KF_COORDINATE_SET_HELPURL = "";
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_ONE = "set";
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_THREE = "to";
Blockly.Msg.KF_COORDINATE_SET_MESSAGE_TWO = "of";
Blockly.Msg.KF_COORDINATE_SET_TOOLTIP = "Sets the selected axis to a defined value for the passed coordinate";
Blockly.Msg.KF_EVENT_ANIMATION_HELPURL = "";
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_AFTER = "has";
Blockly.Msg.KF_EVENT_ANIMATION_MESSAGE_BEFORE = "When the animation";
Blockly.Msg.KF_EVENT_ANIMATION_TOOLTIP = "Fires events when a selected event occurs on the animation passed.";
Blockly.Msg.KF_EVENT_CONSTANTLY_HELPURL = "";
Blockly.Msg.KF_EVENT_CONSTANTLY_MESSAGE = "Constantly";
Blockly.Msg.KF_EVENT_CONSTANTLY_TOOLTIP = "The event triggered every frame";
Blockly.Msg.KF_EVENT_CREATE_HELPURL = "";
Blockly.Msg.KF_EVENT_CREATE_MESSAGE = "When created";
Blockly.Msg.KF_EVENT_CREATE_TOOLTIP = "The event triggered when this game object is created";
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_HELPURL = "";
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "When key";
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "updates";
Blockly.Msg.KF_EVENT_INSTANCE_PROPERTIES_SET_TOOLTIP = "";
Blockly.Msg.KF_EVENT_INST_INPUT_HELPURL = "";
Blockly.Msg.KF_EVENT_INST_INPUT_MESSAGE = "When the player ";
Blockly.Msg.KF_EVENT_INST_INPUT_TOOLTIP = "The event is triggered when the player releases/presses (click/touch) a given instance";
Blockly.Msg.KF_EVENT_INST_PRESS_HELPURL = "";
Blockly.Msg.KF_EVENT_INST_PRESS_MESSAGE = "When the player presses on ";
Blockly.Msg.KF_EVENT_INST_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch on the given instance.";
Blockly.Msg.KF_EVENT_INST_RELEASE_HELPURL = "";
Blockly.Msg.KF_EVENT_INST_RELEASE_MESSAGE = "When the player releases over ";
Blockly.Msg.KF_EVENT_INST_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch on the given instance.";
Blockly.Msg.KF_EVENT_KEY_INPUT_HELPURL = "";
Blockly.Msg.KF_EVENT_KEY_INPUT_MESSAGE = "When the player";
Blockly.Msg.KF_EVENT_KEY_INPUT_TOOLTIP = "The event is triggered when the player presses/releases the given key on their keyboard.";
Blockly.Msg.KF_EVENT_KEY_PRESS_HELPURL = "";
Blockly.Msg.KF_EVENT_KEY_PRESS_MESSAGE = "When the player presses";
Blockly.Msg.KF_EVENT_KEY_PRESS_TOOLTIP = "The event triggered when the player presses the given key on their keyboard.";
Blockly.Msg.KF_EVENT_KEY_RELEASE_HELPURL = "";
Blockly.Msg.KF_EVENT_KEY_RELEASE_MESSAGE = "When the player releases";
Blockly.Msg.KF_EVENT_KEY_RELEASE_TOOLTIP = "The event triggered when the player releases the given key on their keyboard.";
Blockly.Msg.KF_EVENT_LEVEL_START_HELPURL = "";
Blockly.Msg.KF_EVENT_LEVEL_START_MESSAGE = "When the level";
Blockly.Msg.KF_EVENT_LEVEL_START_TOOLTIP = "Executes when the current level starts. Only executes when a level starts up.";
Blockly.Msg.KF_EVENT_MESSAGE_HELPURL = "";
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_AFTER = "is retrieved";
Blockly.Msg.KF_EVENT_MESSAGE_MESSAGE_BEFORE = "When a message of";
Blockly.Msg.KF_EVENT_MESSAGE_TOOLTIP = "Send events when the player";
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_HELPURL = "";
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_ONE = "When a message of";
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_MESSAGE_TWO = "is retreived";
Blockly.Msg.KF_EVENT_MESSAGE_VALUE_TOOLTIP = "Executed when a message is retrieved. You can use this block to get a value send from the message with value blocks.";
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_HELPURL = "";
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_MESSAGE = "Post Constantly";
Blockly.Msg.KF_EVENT_POST_CONSTANTLY_TOOLTIP = "Triggered every frame AFTER the constantly event blocks.";
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_HELPURL = "";
Blockly.Msg.KF_EVENT_PRE_CONSTANTLY_MESSAGE = "Pre Constantly";
Blockly.Msg.KF_EVENT_REMOVE_HELPURL = "";
Blockly.Msg.KF_EVENT_REMOVE_MESSAGE = "When removed";
Blockly.Msg.KF_EVENT_REMOVE_TOOLTIP = "The event is triggered when this gameobject is destroyed.";
Blockly.Msg.KF_EVENT_STAGE_INPUT_HELPURL = "";
Blockly.Msg.KF_EVENT_STAGE_INPUT_MESSAGE = "When the stage is";
Blockly.Msg.KF_EVENT_STAGE_INPUT_TOOLTIP = "The event is trggered when the player either pressed or releases anywhere in the game scene.";
Blockly.Msg.KF_EVENT_STAGE_PRESS_HELPURL = "";
Blockly.Msg.KF_EVENT_STAGE_PRESS_MESSAGE = "When stage is pressed";
Blockly.Msg.KF_EVENT_STAGE_PRESS_TOOLTIP = "The event triggered when the player presses a click/touch down anywhere in the game scene.";
Blockly.Msg.KF_EVENT_STAGE_RELEASE_HELPURL = "";
Blockly.Msg.KF_EVENT_STAGE_RELEASE_MESSAGE = "When stage is released";
Blockly.Msg.KF_EVENT_STAGE_RELEASE_TOOLTIP = "The event triggered when the player releases a click/touch anywhere in the game scene.";
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_HELPURL = "";
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_MESSAGE = "When the stage is";
Blockly.Msg.KF_EVENT_STAGE_TOUCHED_TOOLTIP = "Executes when the stage is touched.";
Blockly.Msg.KF_EVENT_TIME_HELPURL = "";
Blockly.Msg.KF_EVENT_TIME_MESSAGE_AFTER = "milliseconds";
Blockly.Msg.KF_EVENT_TIME_SINGLE_HELPURL = "";
Blockly.Msg.KF_EVENT_TIME_SINGLE_MESSAGE_AFTER = "milliseconds have passed";
Blockly.Msg.KF_EVENT_TIME_SINGLE_TOOLTIP = "Triggers the inner blocks after the set period of time has occured. Warning: Does not check to see if the object was destroyed before the event fires.";
Blockly.Msg.KF_EVENT_TIME_TOOLTIP = "Triggers the event when the number of milliseconds set has passed. The number of milliseconds passed is not dynamic, meaning that it will not update once set.";
Blockly.Msg.KF_EVENT_TOUCH_ON_HELPURL = "";
Blockly.Msg.KF_EVENT_TOUCH_ON_MESSAGE = "When I am touched by";
Blockly.Msg.KF_EVENT_TOUCH_ON_TOOLTIP = "Triggers the inner blocks when this instance collides with the instance passed.";
Blockly.Msg.KF_EVENT_TOUCH_RETURN_HELPURL = "";
Blockly.Msg.KF_EVENT_TOUCH_RETURN_MESSAGE = "When I am touched get";
Blockly.Msg.KF_EVENT_TOUCH_RETURN_TOOLTIP = "Whenever this instance is touched by another instance (using arcadephysics) it will set a variable to that instance who touched it.";
Blockly.Msg.KF_GAME_GET_TIME_HELPURL = "";
Blockly.Msg.KF_GAME_GET_TIME_MESSAGE = "time";
Blockly.Msg.KF_GAME_GET_TIME_TOOLTIP = "Returns the associate time method associated.";
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_HELPURL = "";
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_MESSAGE = "go to";
Blockly.Msg.KF_GAME_GOTO_LEVEL_NUM_TOOLTIP = "Changes the current level to the level specified.";
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_HELPURL = "";
Blockly.Msg.KF_GAME_LEVEL_SPECIAL_TOOLTIP = "A list of special levels, they include previous/current/next and the first/last levels.";
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_HELPURL = "";
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_MESSAGE = "stage colour";
Blockly.Msg.KF_GAME_STAGE_GET_COLOUR_TOOLTIP = "Gets the colour of the game background.";
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_HELPURL = "";
Blockly.Msg.KF_GAME_STAGE_GET_SIZE_TOOLTIP = "Gets the size of the games viewport on the screen.";
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_HELPURL = "";
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_MESSAGE = "set stage colour to";
Blockly.Msg.KF_GAME_STAGE_SET_COLOUR_TOOLTIP = "Sets the colour of the game background.";
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_HELPURL = "";
Blockly.Msg.KF_GAME_STAGE_SET_SIZE_TOOLTIP = "Sets the size of the games viewport on the screen.";
Blockly.Msg.KF_GAME_TIME_METHOD_HELPURL = "";
Blockly.Msg.KF_GAME_TIME_METHOD_MESSAGE = "time";
Blockly.Msg.KF_GAME_TIME_METHOD_TOOLTIP = "Pauses or resumes the clock, thus pausing/resume gameplay.";
Blockly.Msg.KF_GET_DEBUG_MODE_MESSAGE = "get debug mode";
Blockly.Msg.KF_GET_DEBUG_MODE_TOOLTIP = "Returns the boolean indiciating if debug mode is currently on or off";
Blockly.Msg.KF_GET_DEBUG_MODE_URL = "";
Blockly.Msg.KF_INPUT_FINGERS_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGERS_MESSAGE = "all fingers";
Blockly.Msg.KF_INPUT_FINGERS_TOOLTIP = "Returns a list of all the finger objects.";
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_MESSAGE = "is";
Blockly.Msg.KF_INPUT_FINGER_GET_BOOL_TOOLTIP = "Returns a boolean associated with the selected statement.";
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_MESSAGE = "of";
Blockly.Msg.KF_INPUT_FINGER_GET_COORDS_TOOLTIP = "";
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_MESSAGE = "of";
Blockly.Msg.KF_INPUT_FINGER_GET_TIMES_TOOLTIP = "A number associated with the time selected.";
Blockly.Msg.KF_INPUT_FINGER_LATEST_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGER_LATEST_MESSAGE = "latest finger";
Blockly.Msg.KF_INPUT_FINGER_LATEST_TOOLTIP = "The finger which was used in the last event.";
Blockly.Msg.KF_INPUT_FINGER_SELECT_HELPURL = "";
Blockly.Msg.KF_INPUT_FINGER_SELECT_MESSAGE = "finger";
Blockly.Msg.KF_INPUT_FINGER_SELECT_TOOLTIP = "Returns the finger associated with the number passed.";
Blockly.Msg.KF_INPUT_MOUSE_HELPURL = "";
Blockly.Msg.KF_INPUT_MOUSE_MESSAGE = "of mouse";
Blockly.Msg.KF_INPUT_MOUSE_TOOLTIP = "The position of the mouse in the current level";
Blockly.Msg.KF_INSTANCE_ADD_TAG_HELPURL = "";
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_AFTER = "on";
Blockly.Msg.KF_INSTANCE_ADD_TAG_MESSAGE_BEFORE = "tag";
Blockly.Msg.KF_INSTANCE_ADD_TAG_TOOLTIP = "Adds a tag passed to the given gameobject.";
Blockly.Msg.KF_INSTANCE_DEATH_HELPURL = "";
Blockly.Msg.KF_INSTANCE_DEATH_MESSAGE = "destroy";
Blockly.Msg.KF_INSTANCE_DEATH_TOOLTIP = "Destroys the selected instance. Destruction cannot be reverted!";
Blockly.Msg.KF_INSTANCE_EXECUTE_HELPURL = "";
Blockly.Msg.KF_INSTANCE_EXECUTE_MESSAGE = "Execute";
Blockly.Msg.KF_INSTANCE_EXECUTE_TOOLTIP = "Executes the text directly pasted as code.";
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_HELPURL = "";
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_MESSAGE = "get all children by tag";
Blockly.Msg.KF_INSTANCE_GET_ALL_BY_TAG_TOOLTIP = "Returns a list of all the instances that have the tag passed.";
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_HELPURL = "";
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_MESSAGE = "instance by tag";
Blockly.Msg.KF_INSTANCE_GET_BY_TAG_TOOLTIP = "Returns a single instance by the tag passed.";
Blockly.Msg.KF_INSTANCE_GET_HELPURL = "";
Blockly.Msg.KF_INSTANCE_GET_TOOLTIP = "Gets the value of a selected property of the given instance.";
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_HELPURL = "";
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_MESSAGE = "get visibility of";
Blockly.Msg.KF_INSTANCE_GET_VISIBLE_TOOLTIP = "Returns visibility state of this gameobject. An alpha of zero is does not mean that the visiblity is false.";
Blockly.Msg.KF_INSTANCE_HAS_TAG_HELPURL = "";
Blockly.Msg.KF_INSTANCE_HAS_TAG_MESSAGE = "has tag";
Blockly.Msg.KF_INSTANCE_HAS_TAG_TOOLTIP = "Returns a boolean indicating if the gameobject has the tag or not.";
Blockly.Msg.KF_INSTANCE_MOVE_HELPURL = "";
Blockly.Msg.KF_INSTANCE_MOVE_TOOLTIP = "Changes the depth (layer ordering) of an instance passed by the selected dropdown method.";
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_HELPURL = "";
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_ONE = "get key";
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_MESSAGE_TWO = "on";
Blockly.Msg.KF_INSTANCE_PROPERTIES_GET_TOOLTIP = "";
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_HELPURL = "";
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_ONE = "set key";
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_THREE = "on";
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_INSTANCE_PROPERTIES_SET_TOOLTIP = "";
Blockly.Msg.KF_INSTANCE_SELECT_HELPURL = "";
Blockly.Msg.KF_INSTANCE_SELECT_MESSAGE = "instance ";
Blockly.Msg.KF_INSTANCE_SELECT_TOOLTIP = "Selects a game object with the corresponding id.";
Blockly.Msg.KF_INSTANCE_SELF_HELPURL = "";
Blockly.Msg.KF_INSTANCE_SELF_MESSAGE = "myself";
Blockly.Msg.KF_INSTANCE_SELF_TOOLTIP = "The game object that this script is attached to.";
Blockly.Msg.KF_INSTANCE_SET_HELPURL = "";
Blockly.Msg.KF_INSTANCE_SET_TOOLTIP = "Sets the selected property of a given instance to a new value.";
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_HELPURL = "";
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_AFTER = "to";
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_MESSAGE_BEFORE = "set visibility of";
Blockly.Msg.KF_INSTANCE_SET_VISIBLE_TOOLTIP = "Sets whether the gameobject should be renderer or not. An alpha of zero is does not mean that the visiblity is false.";
Blockly.Msg.KF_INTERSECTS_CONTAINS_HELPURL = "";
Blockly.Msg.KF_INTERSECTS_CONTAINS_MESSAGE = "contains";
Blockly.Msg.KF_INTERSECTS_OVERLAPS_HELPURL = "";
Blockly.Msg.KF_INTERSECTS_OVERLAPS_MESSAGE = "overlaps";
Blockly.Msg.KF_INTERSECTS_OVERLAPS_TOOLTIP = "Checks to see if the two passed instances overlap.";
Blockly.Msg.KF_KEY_SPECIAL_HELPURL = "";
Blockly.Msg.KF_KEY_SPECIAL_MESSAGE = "key:";
Blockly.Msg.KF_KEY_SPECIAL_TOOLTIP = "A special keyboard key";
Blockly.Msg.KF_MATH_INSTANCE_HELPURL = "";
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER = "to";
Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE = "from";
Blockly.Msg.KF_MATH_INSTANCE_TOOLTIP = "Returns the selected value between two instances.";
Blockly.Msg.KF_MATH_LERP_HELPURL = "";
Blockly.Msg.KF_MATH_LERP_MESSAGE_ONE = "linear interpolation from";
Blockly.Msg.KF_MATH_LERP_MESSAGE_THREE = "by";
Blockly.Msg.KF_MATH_LERP_MESSAGE_TOOLTIP = "";
Blockly.Msg.KF_MATH_LERP_MESSAGE_TWO = "to";
Blockly.Msg.KF_MATH_UTILS_HELPURL = "";
Blockly.Msg.KF_MATH_UTILS_TOOLTIP = "";
Blockly.Msg.KF_MATH_XY_TO_XY_HELPURL = "";
Blockly.Msg.KF_MATH_XY_TO_XY_TOOLTIP = "Returns the selected value between an instance and a set of coordinates passed.";
Blockly.Msg.KF_MESSAGING_CLASS_HELPURL = "";
Blockly.Msg.KF_MESSAGING_CLASS_MESSAGE_AFTER = "to all";
Blockly.Msg.KF_MESSAGING_CLASS_TOOLTIP = "Sends a message to all instances of a class you pass.";
Blockly.Msg.KF_MESSAGING_EVERYONE_HELPURL = "";
Blockly.Msg.KF_MESSAGING_EVERYONE_MESSAGE = "send every gameobject a message of";
Blockly.Msg.KF_MESSAGING_EVERYONE_TOOLTIP = "Sends a message to every gameobject.";
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_HELPURL = "";
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_ONE = "send message to everyone";
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_MESSAGE_TWO = "with a value of";
Blockly.Msg.KF_MESSAGING_EVERYONE_VALUE_TOOLTIP = "Sends a message and value defined to every gameobject.";
Blockly.Msg.KF_MESSAGING_INSTANCE_HELPURL = "";
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_AFTER = "to";
Blockly.Msg.KF_MESSAGING_INSTANCE_MESSAGE_BEFORE = "send message";
Blockly.Msg.KF_MESSAGING_INSTANCE_TOOLTIP = "Sends a message to a singular instance you passed.";
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_HELPURL = "";
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_ONE = "send message";
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_THREE = "with a value of";
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_MESSAGE_TWO = "to";
Blockly.Msg.KF_MESSAGING_INSTANCE_VALUE_TOOLTIP = "Sends a message and value to an instance.";
Blockly.Msg.KF_MESSAGING_LIST_HELPURL = "";
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_AFTER = "to each instance in";
Blockly.Msg.KF_MESSAGING_LIST_MESSAGE_BEFORE = "send message";
Blockly.Msg.KF_MESSAGING_LIST_TOOLTIP = "Sends a message to every instance in a list.";
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_ONE = "set colour of shape";
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_MESSAGE_TWO = "to";
Blockly.Msg.KF_PRIMITIVES_CHANGE_COLOUR_TOOLTIP = "Sets the colour a shape will render to a particular value.";
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_AFTER = "with a radius of";
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_MESSAGE_BEFORE = "create new";
Blockly.Msg.KF_PRIMITIVES_CREATE_CIRCLE_TOOLTIP = "Creates a new circle with a radius that you set.";
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_ONE = "create new";
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_THREE = "with a width of";
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_MESSAGE_TWO = "from origin to";
Blockly.Msg.KF_PRIMITIVES_CREATE_LINE_TOOLTIP = "Creates a new line from the transforms origin to a point in space.";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_FOUR = " edges";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_ONE = "create new";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_THREE = " and ";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_MESSAGE_TWO = "with a radius of";
Blockly.Msg.KF_PRIMITIVES_CREATE_POLYGON_TOOLTIP = "Creates a new polygon.";
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_AFTER = "with a width/height of";
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_MESSAGE_BEFORE = "create new";
Blockly.Msg.KF_PRIMITIVES_CREATE_RECTANGLE_TOOLTIP = "Creates a new rectangle with a width and height that you set.";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_FOUR = "points";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_ONE = "create new";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_THREE = "and";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_MESSAGE_TWO = "with a radius of";
Blockly.Msg.KF_PRIMITIVES_CREATE_STAR_TOOLTIP = "Creates a new star with a specified number of points.";
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_HELPURL = "";
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_MESSAGE = "get colour of shape";
Blockly.Msg.KF_PRIMITIVES_GET_COLOUR_TOOLTIP = "Returns the colour of a shape passed.";
Blockly.Msg.KF_SET_DEBUG_MODE_MESSAGE = "set debug mode";
Blockly.Msg.KF_SET_DEBUG_MODE_TOOLTIP = "Sets the debug mode of the game";
Blockly.Msg.KF_SET_DEBUG_MODE_URL = "";
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_HELPURL = "";
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_MESSAGE = "music";
Blockly.Msg.KF_SOUND_BACKGROUND_STATE_TOOLTIP = "Pauses or resumes the current background track.";
Blockly.Msg.KF_SOUND_GET_MUTE_HELPURL = "";
Blockly.Msg.KF_SOUND_GET_MUTE_MESSAGE = "mute";
Blockly.Msg.KF_SOUND_GET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";
Blockly.Msg.KF_SOUND_GET_VOLUME_HELPURL = "";
Blockly.Msg.KF_SOUND_GET_VOLUME_MESSAGE = "get volume";
Blockly.Msg.KF_SOUND_GET_VOLUME_TOOLTIP = "Gets the volume of all sounds played. A number from 0 - 100.";
Blockly.Msg.KF_SOUND_HELPURL = "";
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_HELPURL = "";
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_MESSAGE = "play music";
Blockly.Msg.KF_SOUND_PLAY_BACKGROUND_TOOLTIP = "Starts playing the specified music from the beginning.";
Blockly.Msg.KF_SOUND_PLAY_EFFECT_HELPURL = "";
Blockly.Msg.KF_SOUND_PLAY_EFFECT_MESSAGE = "play sound effect";
Blockly.Msg.KF_SOUND_PLAY_EFFECT_TOOLTIP = "Plays the given sound effect once.";
Blockly.Msg.KF_SOUND_SET_MUTE_HELPURL = "";
Blockly.Msg.KF_SOUND_SET_MUTE_MESSAGE = "mute";
Blockly.Msg.KF_SOUND_SET_MUTE_TOOLTIP = "Sets the mute state of the selected piece of audio by a boolean passed.";
Blockly.Msg.KF_SOUND_SET_VOLUME_HELPURL = "";
Blockly.Msg.KF_SOUND_SET_VOLUME_MESSAGE = "set volume";
Blockly.Msg.KF_SOUND_SET_VOLUME_TOOLTIP = "Sets the volume of all sounds played. A number from 0 - 100.";
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_HELPURL = "";
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_MESSAGE = "stop the current music";
Blockly.Msg.KF_SOUND_STOP_BACKGROUND_TOOLTIP = "Stops playing the current music and clears the playhead. If resumed it will start from the beginning.";
Blockly.Msg.KF_SOUND_TOOLTIP = "A list of all the sounds included in the game.";
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_ONE = "set text alignment of";
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_TEXT_ALIGNMENT_SET_TOOLTIP = "Sets the alignment of a textfield to a selected value in the dropdown";
Blockly.Msg.KF_TEXT_COLOUR_GET_HELPURL = "";
Blockly.Msg.KF_TEXT_COLOUR_GET_MESSAGE = "get font colour of";
Blockly.Msg.KF_TEXT_COLOUR_GET_TOOLTIP = "Returns the font colour of a textfield";
Blockly.Msg.KF_TEXT_COLOUR_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_ONE = "set font colour of";
Blockly.Msg.KF_TEXT_COLOUR_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_TEXT_COLOUR_SET_TOOLTIP = "Sets the font colour of a passed textfield to a colour passed";
Blockly.Msg.KF_TEXT_CREATE_HELPURL = "";
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_ONE = "create new";
Blockly.Msg.KF_TEXT_CREATE_MESSAGE_TWO = "with text";
Blockly.Msg.KF_TEXT_CREATE_TOOLTIP = "Creates a new textfield.";
Blockly.Msg.KF_TEXT_FAMILY_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_ONE = "set font family of";
Blockly.Msg.KF_TEXT_FAMILY_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_TEXT_FAMILY_SET_TOOLTIP = "Sets the font family that a textfield should use.";
Blockly.Msg.KF_TEXT_FONT_PRESETS_HELPURL = "";
Blockly.Msg.KF_TEXT_FONT_PRESETS_TOOLTIP = "Returns the string which identifies the font family selected";
Blockly.Msg.KF_TEXT_NUMERIC_GET_HELPURL = "";
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_ONE = "get";
Blockly.Msg.KF_TEXT_NUMERIC_GET_MESSAGE_TWO = "of";
Blockly.Msg.KF_TEXT_NUMERIC_GET_TOOLTIP = "Returns the current value of the selected property from a textfield";
Blockly.Msg.KF_TEXT_NUMERIC_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_ONE = "set";
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_THREE = "to";
Blockly.Msg.KF_TEXT_NUMERIC_SET_MESSAGE_TWO = "of";
Blockly.Msg.KF_TEXT_NUMERIC_SET_TOOLTIP = "Sets the numeric value of a textfield to the value passed";
Blockly.Msg.KF_TEXT_TEXT_GET_HELPURL = "";
Blockly.Msg.KF_TEXT_TEXT_GET_MESSAGE = "get text of";
Blockly.Msg.KF_TEXT_TEXT_GET_TOOLTIP = "Returns the text of a textfield";
Blockly.Msg.KF_TEXT_TEXT_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_ONE = "set text of";
Blockly.Msg.KF_TEXT_TEXT_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_TEXT_TEXT_SET_TOOLTIP = "Sets the text which a textfield should display textfield to a string passed";
Blockly.Msg.KF_TEXT_WEIGHT_SET_HELPURL = "";
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_ONE = "set text weight of";
Blockly.Msg.KF_TEXT_WEIGHT_SET_MESSAGE_TWO = "to";
Blockly.Msg.KF_TEXT_WEIGHT_SET_TOOLTIP = "Sets the font weight of a textfield to a selected value in the dropdown";
Blockly.Msg.KF_TYPE_BOOLEAN = "True/False";
Blockly.Msg.KF_TYPE_INSTANCE = "Instance";
Blockly.Msg.KF_TYPE_NUMBER = "Number";
Blockly.Msg.KF_TYPE_STRING = "Text";
Blockly.Msg.LISTS_ADD_HELPURL = "";
Blockly.Msg.LISTS_ADD_MESSAGE_ONE = "in list";
Blockly.Msg.LISTS_ADD_MESSAGE_THREE = "to the";
Blockly.Msg.LISTS_ADD_MESSAGE_TWO = "add";
Blockly.Msg.LISTS_ADD_TOOLTIP = "Adds a value to either the front or to the end of a list provided.";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET = "set %1 to %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_MESSAGE_ONE = "set";
Blockly.Msg.VARIABLES_SET_MESSAGE_TWO = "to";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.VARIABLES_TYPE_ANY = "any";
Blockly.Msg.VARIABLES_TYPE_ARRAY = "list";
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "true/false";
Blockly.Msg.VARIABLES_TYPE_CLASS = "class";
Blockly.Msg.VARIABLES_TYPE_COLOUR = "colour";
Blockly.Msg.VARIABLES_TYPE_COORDINATE = "coordinate";
Blockly.Msg.VARIABLES_TYPE_INSTANCE = "instance";
Blockly.Msg.VARIABLES_TYPE_NUMBER = "number";
Blockly.Msg.VARIABLES_TYPE_POINTER = "finger/pointer";
Blockly.Msg.VARIABLES_TYPE_SOUND = "sound";
Blockly.Msg.VARIABLES_TYPE_STRING = "text";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_AFTER = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_AFTER;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.KF_MATH_XY_TO_XY_MESSAGE_BEFORE = Blockly.Msg.KF_MATH_INSTANCE_MESSAGE_BEFORE;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;